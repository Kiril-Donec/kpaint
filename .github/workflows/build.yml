name: Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        build_type: [RelWithDebInfo]
        ui: [gui]
        
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Install Linux Dependencies
      if: runner.os == 'Linux'
      shell: bash
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y \
          libpixman-1-dev libfreetype6-dev libharfbuzz-dev zlib1g-dev \
          libx11-dev libxcursor-dev libxi-dev libgl1-mesa-dev libfontconfig1-dev
          
    - name: Install Windows Dependencies
      if: runner.os == 'Windows'
      shell: bash
      run: |
        choco install -y wget 7zip
        wget https://github.com/libgit2/libgit2/releases/download/v1.9.0/git2-1.9.0.tar.gz
        tar xf git2-1.9.0.tar.gz
        mkdir -p build/bin
        cp libgit2-1.9.0/build64/libcrypt-1.1-x64.dll build/bin/ || true
        
    - name: Install Skia
      if: ${{ matrix.ui == 'gui' }}
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]] ; then
          choco install wget -y --no-progress
          wget https://github.com/aseprite/skia/releases/download/m102-861e4743af/Skia-Windows-Release-x64.zip
          unzip Skia-Windows-Release-x64.zip -d skia
        elif [[ "${{ runner.os }}" == "macOS" ]] ; then
          wget https://github.com/aseprite/skia/releases/download/m102-861e4743af/Skia-macOS-Release-arm64.zip
          unzip Skia-macOS-Release-arm64.zip -d skia
        else
          wget https://github.com/aseprite/skia/releases/download/m102-861e4743af/Skia-Linux-Release-x64-libstdc++.zip
          unzip Skia-Linux-Release-x64-libstdc++.zip -d skia
        fi
        
    - name: ccache
      uses: hendrikmuhs/ccache-action@v1
      if: ${{ runner.os == 'Linux' || runner.os == 'macOS' }}
      with:
        key: ${{ matrix.os }}-${{ matrix.ui }}-${{ matrix.build_type }}
        
    - uses: aseprite/get-ninja@main
    
    - uses: ilammy/msvc-dev-cmd@v1
      if: runner.os == 'Windows'
      
    - name: Generating Makefiles
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]] ; then
          export enable_ccache=off
        else
          export enable_ccache=on
        fi

        if [[ "${{ matrix.ui }}" == "gui" ]] ; then
          export laf_backend=skia
        else
          export laf_backend=none
        fi

        if [[ "${{ runner.os }}" == "macOS" ]] ; then
          export skia_arch=arm64
        else
          export skia_arch=x64
        fi

        cmake -S . -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 \
          -DENABLE_TESTS=ON \
          -DENABLE_CCACHE=$enable_ccache \
          -DLAF_BACKEND=$laf_backend \
          -DSKIA_DIR=skia \
          -DSKIA_LIBRARY_DIR=skia/out/Release-$skia_arch
          
    - name: Compiling
      shell: bash
      run: |
        cd build && ninja
        
    - name: Create Archive
      if: matrix.ui == 'gui' && matrix.build_type == 'RelWithDebInfo'
      shell: bash
      run: |
        cd build
        mkdir -p kpaint
        if [[ "${{ runner.os }}" == "Windows" ]] ; then
          cp bin/aseprite.exe kpaint/kpaint.exe
          cp bin/*.dll kpaint/
          cp -r ../data kpaint/
          7z a kpaint-windows.zip kpaint
        elif [[ "${{ runner.os }}" == "macOS" ]] ; then
          cp bin/aseprite kpaint/kpaint
          cp -r ../data kpaint/
          mkdir -p "kpaint/KPaint.app/Contents/MacOS"
          mkdir -p "kpaint/KPaint.app/Contents/Resources"
          cp kpaint/kpaint "kpaint/KPaint.app/Contents/MacOS/"
          cp -r kpaint/data "kpaint/KPaint.app/Contents/Resources/"
          cat > "kpaint/KPaint.app/Contents/Info.plist" << 'EOF'
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>CFBundleExecutable</key>
    <string>kpaint</string>
    <key>CFBundleIdentifier</key>
    <string>com.kirixstudio.kpaint</string>
    <key>CFBundleName</key>
    <string>KPaint</string>
    <key>CFBundlePackageType</key>
    <string>APPL</string>
    <key>CFBundleShortVersionString</key>
    <string>1.0</string>
    <key>LSMinimumSystemVersion</key>
    <string>10.9</string>
    <key>NSHighResolutionCapable</key>
    <true/>
</dict>
</plist>
EOF
          zip -r kpaint-macos.zip "kpaint/KPaint.app"
        else
          cp bin/aseprite kpaint/kpaint
          cp -r ../data kpaint/
          zip -r kpaint-linux.zip kpaint
        fi
        
    - name: Upload Build Artifacts
      if: matrix.ui == 'gui' && matrix.build_type == 'RelWithDebInfo'
      uses: actions/upload-artifact@v4
      with:
        name: kpaint-${{ runner.os }}
        path: build/kpaint-*.zip
