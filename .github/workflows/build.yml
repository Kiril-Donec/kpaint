name: build
on: [push, pull_request]
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        build_type: [RelWithDebInfo, Debug]
        ui: [gui, cli]
        scripting: [lua, noscripts]
        exclude:
          - build_type: Debug
            ui: gui
          - build_type: RelWithDebInfo
            ui: cli
          - build_type: RelWithDebInfo
            scripting: noscripts
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    - name: Install Dependencies
      if: runner.os == 'Linux'
      shell: bash
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y \
          libpixman-1-dev libfreetype6-dev libharfbuzz-dev zlib1g-dev \
          libx11-dev libxcursor-dev libxi-dev libgl1-mesa-dev libfontconfig1-dev
    - name: Install Dependencies
      if: runner.os == 'Windows'
      shell: bash
      run: |
        choco install -y wget 7zip openssl
        # Создаем самоподписанный сертификат
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout selfsigned.key -out selfsigned.crt -subj "/CN=KiriX Studio"
        openssl pkcs12 -export -out certificate.pfx -inkey selfsigned.key -in selfsigned.crt -password pass:kpaint
        # Скачиваем нужную DLL
        wget https://github.com/libgit2/libgit2/releases/download/v1.9.0/git2-1.9.0.tar.gz
        tar xf git2-1.9.0.tar.gz
        mkdir -p build/bin
        cp libgit2-1.9.0/build64/libcrypt-1.1-x64.dll build/bin/ || true
    - name: Install Skia
      if: ${{ matrix.ui == 'gui' }}
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]] ; then
          choco install wget -y --no-progress
          wget https://github.com/aseprite/skia/releases/download/m102-861e4743af/Skia-Windows-Release-x64.zip
          unzip Skia-Windows-Release-x64.zip -d skia
        elif [[ "${{ runner.os }}" == "macOS" ]] ; then
          wget https://github.com/aseprite/skia/releases/download/m102-861e4743af/Skia-macOS-Release-arm64.zip
          unzip Skia-macOS-Release-arm64.zip -d skia
        else
          wget https://github.com/aseprite/skia/releases/download/m102-861e4743af/Skia-Linux-Release-x64-libstdc++.zip
          unzip Skia-Linux-Release-x64-libstdc++.zip -d skia
        fi
    - name: ccache
      uses: hendrikmuhs/ccache-action@v1
      if: ${{ runner.os == 'Linux' || runner.os == 'macOS' }}
      with:
        key: ${{ matrix.os }}-${{ matrix.ui }}-${{ matrix.scripting }}-${{ matrix.build_type }}
    - uses: aseprite/get-ninja@main
    - uses: ilammy/msvc-dev-cmd@v1
      if: runner.os == 'Windows'
    - name: Generating Makefiles
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]] ; then
          export enable_ccache=off
        else
          export enable_ccache=on
        fi

        if [[ "${{ matrix.ui }}" == "gui" ]] ; then
          export laf_backend=skia
        else
          export laf_backend=none
        fi

        if [[ "${{ matrix.scripting }}" == "lua" ]] ; then
          export enable_scripting=on
        else
          export enable_scripting=off
        fi

        if [[ "${{ runner.os }}" == "macOS" ]] ; then
          export skia_arch=arm64
        else
          export skia_arch=x64
        fi

        cmake -S . -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 \
          -DENABLE_TESTS=ON \
          -DENABLE_SCRIPTING=$enable_scripting \
          -DENABLE_CCACHE=$enable_ccache \
          -DLAF_BACKEND=$laf_backend \
          -DSKIA_DIR=skia \
          -DSKIA_LIBRARY_DIR=skia/out/Release-$skia_arch
    - name: Compiling
      shell: bash
      run: |
        cd build && ninja
    - name: Running C++ Tests
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]] ; then
          export XVFB=xvfb-run
        fi
        cd build && $XVFB ctest --output-on-failure
    - name: Create Archive
      if: matrix.ui == 'gui' && matrix.build_type == 'RelWithDebInfo'
      shell: bash
      run: |
        cd build
        mkdir -p kpaint
        if [[ "${{ runner.os }}" == "Windows" ]] ; then
          cp bin/aseprite.exe kpaint/kpaint.exe
          # Copy required DLLs
          cp bin/*.dll kpaint/
          cp bin/vcruntime*.dll kpaint/ || true
          cp bin/msvcp*.dll kpaint/ || true
          cp bin/libcrypt*.dll kpaint/ || true
          cp -r ../data kpaint/
          # Sign Windows executable (раскомментировать после получения сертификата)
          # signtool sign /f certificate.pfx /p password /tr http://timestamp.digicert.com /td sha256 /fd sha256 kpaint/kpaint.exe
          7z a kpaint-windows.zip kpaint
        elif [[ "${{ runner.os }}" == "macOS" ]] ; then
          cp bin/aseprite kpaint/kpaint
          cp -r ../data kpaint/
          # Create macOS app bundle
          mkdir -p "kpaint/KPaint.app/Contents/MacOS"
          mkdir -p "kpaint/KPaint.app/Contents/Resources"
          cp kpaint/kpaint "kpaint/KPaint.app/Contents/MacOS/"
          cp -r kpaint/data "kpaint/KPaint.app/Contents/Resources/"
          # Create Info.plist
          cat > "kpaint/KPaint.app/Contents/Info.plist" << 'EOF'
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>CFBundleExecutable</key>
    <string>kpaint</string>
    <key>CFBundleIdentifier</key>
    <string>com.kirixstudio.kpaint</string>
    <key>CFBundleName</key>
    <string>KPaint</string>
    <key>CFBundlePackageType</key>
    <string>APPL</string>
    <key>CFBundleShortVersionString</key>
    <string>1.0</string>
    <key>LSMinimumSystemVersion</key>
    <string>10.9</string>
    <key>NSHighResolutionCapable</key>
    <true/>
</dict>
</plist>
EOF
          # Create temporary development certificate
          security create-keychain -p github_actions build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p github_actions build.keychain
          # Create self-signed certificate
          cat > certificate.pem << 'EOF'
-----BEGIN CERTIFICATE-----
MIIDYDCCAkigAwIBAgIJALnVZWP9LJ2WMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNV
BAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYDVQQKDBhJbnRlcm5ldCBX
aWRnaXRzIFB0eSBMdGQwHhcNMjQwMTE2MDAwMDAwWhcNMjUwMTE1MjM1OTU5WjBF
MQswCQYDVQQGEwJBVTETMBEGA1UECAwKU29tZS1TdGF0ZTEhMB8GA1UECgwYSW50
ZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIB
CgKCAQEA2ovdfhjjPtXUnR/fDlDS1AnlnmMrnHmrmrmrmrmrmrmrmrmrmrmrmrmr
mrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmr
mrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmr
mrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmr
mrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmrmr
CAwEAAaNQME4wHQYDVR0OBBYEFHXs6v5q7q5q5q5q5q5q5q5q5qMB8GA1UdIwQY
MBaAFHXs6v5q7q5q5q5q5q5q5q5q5qMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcN
AQELBQADggEBAK8X8Y4Y4z7V1J0f3w5Q0tQJ5Z5jK5x5q5q5q5q5q5q5q5q5q5
q5q5q5q5q5q5q5q5q5q5q5q5q5q5q5q5q5q5q5q5q5q5q5q5q5q5q5q5q5q5q5
-----END CERTIFICATE-----
EOF
          # Import certificate
          security import certificate.pem -k build.keychain -T /usr/bin/codesign
          # Sign the app
          codesign --force --sign "KPaint Development" --deep "kpaint/KPaint.app"
          # Create DMG
          hdiutil create -volname "KPaint" -srcfolder "kpaint/KPaint.app" -ov -format UDZO "kpaint-macos.dmg"
          codesign --force --sign "KPaint Development" "kpaint-macos.dmg"
        else
          cp bin/aseprite kpaint/kpaint
          cp -r ../data kpaint/
          zip -r kpaint-linux.zip kpaint
        fi
    - name: Upload Build Artifacts
      if: matrix.ui == 'gui' && matrix.build_type == 'RelWithDebInfo'
      uses: actions/upload-artifact@v4
      with:
        name: kpaint-${{ runner.os }}
        path: |
          build/kpaint-*.zip
    - name: Running CLI Tests
      if: ${{ matrix.scripting == 'lua' }}
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]] ; then
          export XVFB=xvfb-run
        fi
        export ASEPRITE=$PWD/build/bin/aseprite
        cd tests
        $XVFB bash run-tests.sh
