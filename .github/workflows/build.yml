name: build
on: [push, pull_request]
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        build_type: [RelWithDebInfo, Debug]
        ui: [gui, cli]
        scripting: [lua, noscripts]
        exclude:
          - build_type: Debug
            ui: gui
          - build_type: RelWithDebInfo
            ui: cli
          - build_type: RelWithDebInfo
            scripting: noscripts
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    - name: Install Dependencies
      if: runner.os == 'Linux'
      shell: bash
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y \
          libpixman-1-dev libfreetype6-dev libharfbuzz-dev zlib1g-dev \
          libx11-dev libxcursor-dev libxi-dev libgl1-mesa-dev libfontconfig1-dev
    - name: Install Dependencies
      if: runner.os == 'Windows'
      shell: bash
      run: |
        choco install -y wget 7zip vcredist140
        # Download Visual C++ Redistributable DLLs
        mkdir -p build/bin
        curl -L -o build/bin/libcrypto-3-x64.dll https://github.com/libgit2/libgit2/releases/download/v1.9.0/libcrypto-3-x64.dll
        curl -L -o build/bin/libcrypt-1.1-x64.dll https://github.com/libgit2/libgit2/releases/download/v1.9.0/libcrypt-1.1-x64.dll
        # Copy Visual C++ Runtime DLLs
        cp "C:/Windows/System32/msvcp140.dll" build/bin/ || true
        cp "C:/Windows/System32/vcruntime140.dll" build/bin/ || true
        cp "C:/Windows/System32/vcruntime140_1.dll" build/bin/ || true
    - name: Install Skia
      if: ${{ matrix.ui == 'gui' }}
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]] ; then
          choco install wget -y --no-progress
          wget https://github.com/aseprite/skia/releases/download/m102-861e4743af/Skia-Windows-Release-x64.zip
          unzip Skia-Windows-Release-x64.zip -d skia
        elif [[ "${{ runner.os }}" == "macOS" ]] ; then
          wget https://github.com/aseprite/skia/releases/download/m102-861e4743af/Skia-macOS-Release-arm64.zip
          unzip Skia-macOS-Release-arm64.zip -d skia
        else
          wget https://github.com/aseprite/skia/releases/download/m102-861e4743af/Skia-Linux-Release-x64-libstdc++.zip
          unzip Skia-Linux-Release-x64-libstdc++.zip -d skia
        fi
    - name: ccache
      uses: hendrikmuhs/ccache-action@v1
      if: ${{ runner.os == 'Linux' || runner.os == 'macOS' }}
      with:
        key: ${{ matrix.os }}-${{ matrix.ui }}-${{ matrix.scripting }}-${{ matrix.build_type }}
    - uses: aseprite/get-ninja@main
    - uses: ilammy/msvc-dev-cmd@v1
      if: runner.os == 'Windows'
    - name: Generating Makefiles
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]] ; then
          export enable_ccache=off
        else
          export enable_ccache=on
        fi

        if [[ "${{ matrix.ui }}" == "gui" ]] ; then
          export laf_backend=skia
        else
          export laf_backend=none
        fi

        if [[ "${{ matrix.scripting }}" == "lua" ]] ; then
          export enable_scripting=on
        else
          export enable_scripting=off
        fi

        if [[ "${{ runner.os }}" == "macOS" ]] ; then
          export skia_arch=arm64
        else
          export skia_arch=x64
        fi

        cmake -S . -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 \
          -DENABLE_TESTS=ON \
          -DENABLE_SCRIPTING=$enable_scripting \
          -DENABLE_CCACHE=$enable_ccache \
          -DLAF_BACKEND=$laf_backend \
          -DSKIA_DIR=skia \
          -DSKIA_LIBRARY_DIR=skia/out/Release-$skia_arch
    - name: Compiling
      shell: bash
      run: |
        cd build && ninja
    - name: Running C++ Tests
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]] ; then
          export XVFB=xvfb-run
        fi
        cd build && $XVFB ctest --output-on-failure
    - name: Create Archive
      if: matrix.ui == 'gui' && matrix.build_type == 'RelWithDebInfo'
      shell: bash
      run: |
        cd build
        mkdir -p kpaint
        if [[ "${{ runner.os }}" == "Windows" ]] ; then
          # Download Resource Hacker
          curl -L -o reshacker.exe http://www.angusj.com/resourcehacker/resource_hacker.zip
          7z x reshacker.exe
          
          # Create resource script
          echo "1 RCDATA \"../data\"" > resources.rc
          
          # Compile resources
          ./ResourceHacker.exe -open resources.rc -save resources.res -action compile
          
          # Link resources with executable
          cp bin/aseprite.exe kpaint/kpaint.exe
          ./ResourceHacker.exe -open kpaint/kpaint.exe -save kpaint/kpaint_with_resources.exe -action addskip -res resources.res -mask RCDATA,,
          mv kpaint/kpaint_with_resources.exe kpaint/kpaint.exe
          
          # Download and extract VC++ Redistributable
          curl -L -o vc_redist.exe https://aka.ms/vs/17/release/vc_redist.x64.exe
          7z x vc_redist.exe -o*
          cp `find . -name "vcruntime*.dll" -o -name "msvcp*.dll" -o -name "concrt*.dll"` kpaint/
          
          # Copy crypto DLLs
          cp bin/*.dll kpaint/
          mv libcrypt-1.1-x64.dll kpaint/ || true
          mv libcrypto-3-x64.dll kpaint/ || true
          
          # Create self-extracting archive with all dependencies
          7z a -sfx7z.sfx kpaint-windows.exe kpaint/*
          
          echo "Created self-extracting executable. Contents:"
          ls -la kpaint-windows.exe
        elif [[ "${{ runner.os }}" == "macOS" ]] ; then
          cp bin/aseprite kpaint/kpaint
          cp -r ../data kpaint/
          zip -r kpaint-macos.zip kpaint
        else
          cp bin/aseprite kpaint/kpaint
          cp -r ../data kpaint/
          zip -r kpaint-linux.zip kpaint
        fi
    - name: Upload Build Artifacts
      if: matrix.ui == 'gui' && matrix.build_type == 'RelWithDebInfo'
      uses: actions/upload-artifact@v4
      with:
        name: kpaint-${{ runner.os }}
        path: |
          build/kpaint-*.exe
          build/kpaint-*.zip
    - name: Running CLI Tests
      if: ${{ matrix.scripting == 'lua' }}
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]] ; then
          export XVFB=xvfb-run
        fi
        export ASEPRITE=$PWD/build/bin/aseprite
        cd tests
        $XVFB bash run-tests.sh
